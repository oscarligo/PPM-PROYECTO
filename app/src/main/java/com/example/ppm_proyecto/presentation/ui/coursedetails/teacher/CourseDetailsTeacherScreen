package com.example.ppm_proyecto.presentation.ui.coursedetails.teacher


import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

import java.time.LocalDate

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CourseDetailsTeacherScreen(
    teacherName: String,
    profileUrl: String,
    courseName: String,
    onOpenDrawer: () -> Unit,
    onDateSelected: (LocalDate) -> Unit,
    onEditClicked: () -> Unit
) {
    var selectedDate by remember { mutableStateOf(LocalDate.now()) }

    val students = listOf(
        StudentAttendance("Ana López", AttendanceStatus.PRESENTE),
        StudentAttendance("Carlos Pérez", AttendanceStatus.TARDE),
        StudentAttendance("María Gómez", AttendanceStatus.AUSENTE),
        StudentAttendance("José Ramírez", AttendanceStatus.PENDIENTE),
        
    )

    Scaffold(
        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {

                Text(
                    text = teacherName,
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold
                )

            }
        },
        content = { innerPadding ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
                    .padding(16.dp)
            ) {
                // Título del curso
                Text(
                    text = courseName,
                    style = MaterialTheme.typography.headlineSmall
                )

                Spacer(modifier = Modifier.height(16.dp))

                // Campo de fecha
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text(
                        text = "Fecha: ${selectedDate.toString()}",
                        modifier = Modifier.weight(1f)
                    )

                    Button(onClick = { onDateSelected(selectedDate) }) {
                        Text("Seleccionar fecha")
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                //Subtitulo
                Text(
                    text = "Estudiantes",
                    
                )
                Spacer(modifier = Modifier.height(10.dp))
                // Listado de estudiantes
                //LazyColumn porque sera una cantidad finita
                LazyColumn(
                    modifier = Modifier
                        .fillMaxSize()
                        .weight(1f)
                ) {
                    items(students) { student ->
                        StudentAttendanceCard(student)
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = onEditClicked,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp)
                ) {
                    Text("Editar")
                }
            }
        }
    )
}

//Solo paa las pruebas

data class StudentAttendance(
    val name: String,
    val status: AttendanceStatus
)

enum class AttendanceStatus { PRESENTE, TARDE, AUSENTE, PENDIENTE }


//Función de como se mostrara a un estudiante
@Composable
fun StudentAttendanceCard(student: StudentAttendance) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(12.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(student.name)
            AttendanceIcon(status = student.status)
        }
    }
}

//Para mostrar los iconos
@Composable
fun AttendanceIcon(status: AttendanceStatus) {
    val emoji = when (status) {
        AttendanceStatus.PRESENTE -> "✅"
        AttendanceStatus.TARDE -> "⚠️"
        AttendanceStatus.AUSENTE -> "❌"
        AttendanceStatus.PENDIENTE -> "❓"
    }
    Text(emoji, style = MaterialTheme.typography.titleMedium)
}

// Preview con datos simulados
@Preview(showBackground = true)
@Composable
fun CourseDetailScreenPreview() {
        CourseDetailsTeacherScreen(
            teacherName = "Prof. Ana Castilos",
            profileUrl = "", // Usa tu drawable por defecto
            courseName = "Móvil",
            onOpenDrawer = {},
            onDateSelected = {},
            onEditClicked = {}
        )

}

